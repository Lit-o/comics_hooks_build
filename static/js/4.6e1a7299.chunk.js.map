{"version":3,"sources":["components/error/Error.js","api/ComicsAPI.js","hooks/http.hook.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["Error","className","style","textAlign","color","fontWeight","paddingTop","src","process","alt","display","width","height","objectFit","margin","useComicsAPI","useState","isLoading","setIsLoading","isError","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharData","getCharacter","id","char","name","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","title","pageCount","language","textObjects","price","prices","getAllComics","getComic","ViewRandomChar","href","RandomChar","setChar","useEffect","updateChar","charLoaded","Math","floor","random","then","errorMessage","spinner","Preloader","content","onClick","mjolnir","CharList","props","chars","setChars","isNewCharsLoading","setIsNewCharsLoading","setOffset","charsEnded","setCharsEnded","onRequest","console","log","initial","addedChars","ended","length","charId","charArray","el","changeCharSelected","onKeyDown","e","key","keyCode","preventDefault","tabIndex","loading","error","obj","default","catch","disabled","Skeleton","View","i","EmptyComics","CharInfo","skeleton","ErrorBoundary","state","errorInfo","this","setState","children","Component","MainPage","selectedChar","setSelectedChar","decoration"],"mappings":"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","file":"static/js/4.6e1a7299.chunk.js","sourcesContent":["\n\nexport const Error = () => {\n    return (\n        <div className=\"\" style={{textAlign: 'center'}}>\n            <h2 style={{color: '#9F0013', fontWeight: 'bold', paddingTop: '40px' }}>Something go wrong =( Try again later</h2>\n            <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"error\" \n            style={{display: 'block', width: 210, height: 210, objectFit: 'contain', margin: '0 auto'}}/>\n        </div>\n    )\n}","import {useHttp} from '../hooks/http.hook'\n\nconst useComicsAPI = () => {\n    const {isError, isLoading, request, clearError} = useHttp();\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=398655cdc1734b6cf20b524ab0453ef7';\n    const groupUrl = 'characters';    \n    const _limit = 9;\n    const _offset = 210;\n\n    // getResource = async (url) => {\n    //     let res = await fetch(url);\n    //     if (!res.ok) {\n    //         throw new Error(`Could not fetch ${url}, status - ${res.status}`);\n    //     }\n    //     return await res.json();\n    // }\n\n    const getAllCharacters = async (offset = _offset) => {\n        const res = await request(`${_apiBase}characters?limit=${_limit}&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharData);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(_apiBase + groupUrl + '/' + id + '?' + _apiKey);\n        return _transformCharData(res.data.results[0]);\n    }\n\n    const _transformCharData = (char) => {\n        return {\n            name: char.name,\n            id: char.id,\n            description: char.description || 'information is classified',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || 'There is no description',\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            language: comics.textObjects.language || 'en-us',\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\n        }\n    }\n\n    const getAllComics = async (offset = 0) => {\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n\n    return {isError, isLoading, getAllCharacters, getCharacter, clearError, getAllComics, getComic}\n}\n\nexport default useComicsAPI;","import { useCallback, useState } from \"react\";\n\nexport const useHttp = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [isError, setError] = useState(null);\n\n    const request = useCallback(async (url, method = \"GET\", body = null, headers = {'Content-Type': 'application/json'} ) => {\n        setIsLoading(true);\n        try {\n            const response = await fetch(url, {method, body, headers})\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status - ${response.status}`);\n            }\n            const data = await response.json()\n            setIsLoading(false);\n            return data\n        } catch(e) {\n            setIsLoading(false);\n            setError(e.message);\n            throw e;\n        }\n    }, [])\n\n    const clearError = useCallback(() => setError(null), [])\n\n    return {isError, isLoading, request, clearError}\n}","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport useComicsAPI from '../../api/ComicsAPI';\nimport { Error } from '../error/Error';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport Preloader from '../spinner/Preloader';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({})\n    \n    // const server = useComicsAPI();\n    const {isError, isLoading, getCharacter, clearError} = useComicsAPI();\n\n    useEffect(() => {\n        updateChar()\n    // eslint-disable-next-line\n    }, [])\n\n    const charLoaded = (char) => {\n        setChar(char)\n    }\n\n    const updateChar = () => {\n        clearError()\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000)\n        getCharacter(id)\n            .then(charLoaded)\n    }\n\n        const errorMessage = isError ? <Error/> : null;\n        const spinner = isLoading && <Preloader/>;\n        const content = !(isLoading || isError) && <ViewRandomChar char={char}/>;\n       \n        return (\n            <div className=\"randomchar\">\n                {errorMessage}{spinner}{content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br />\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button className=\"button button__main\" onClick={updateChar}>\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n                </div>\n            </div>\n        )\n    }\n\nconst ViewRandomChar = ({char}) => {    \n    const {name, description, thumbnail, homepage, wiki} = char\n    const notFoundImgLink = 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg';\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={(thumbnail === notFoundImgLink) ? {objectFit: 'contain'} : {objectFit: 'cover'}} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import './charList.scss';\nimport { useState, useEffect } from 'react';\nimport useComicsAPI from '../../api/ComicsAPI';\nimport Preloader from '../spinner/Preloader';\nimport { Error } from '../error/Error';\n\nconst CharList = (props) => {\n    const {isError, isLoading, getAllCharacters, clearError} = useComicsAPI();\n\n    const [chars, setChars] = useState([]);\n    const [isNewCharsLoading, setIsNewCharsLoading] = useState(false)\n    const [offset, setOffset] = useState(395);\n    const [charsEnded, setCharsEnded] = useState(false);\n\n    // useEffect запускается после рендера, поэтому стрелочная onRequest() сможет запуститься, хотя в коде объявлена дальше\n    useEffect(() => {\n        onRequest(offset, true)\n    // eslint-disable-next-line\n    }, [])\n\n    useEffect(() => {\n        console.log('rerender')\n    })\n\n    const onRequest = (offset, initial) => {\n        clearError();\n        initial ? setIsNewCharsLoading(false) : setIsNewCharsLoading(true)\n        getAllCharacters(offset)\n            .then(addedChars)\n    }\n\n    const addedChars = (res) => {\n\n        let ended = false;\n        if (res.length < 9) {\n            ended = true\n        }\n        setChars(chars => [...chars, ...res])\n\n        setIsNewCharsLoading(false)\n        setOffset(offset => offset + 9)\n        setCharsEnded(ended)\n    }\n\n\n    const { charId } = props\n    const notFoundImgLink = 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg';\n    const charArray = chars.map(el => {\n        return (\n            <li\n                className={(charId === el.id) ? \"char__item char__item_selected\" : \"char__item\"}\n                key={el.id}\n                data-id={el.id}\n                onClick={() => props.changeCharSelected(el.id)}\n\n                onKeyDown={\n                    (e) => {\n                        if (e.key === 'Enter') {\n                            props.changeCharSelected(el.id)\n                        } else if (e.keyCode === 32 || e.key === ' ') {\n                            e.preventDefault();\n                            props.changeCharSelected(el.id)\n                        }\n                    }\n                }\n                tabIndex={0}\n            >\n                <img src={el.thumbnail} alt=\"abyss\" style={{ objectFit: (el.thumbnail === notFoundImgLink) ? 'contain' : 'cover' }} />\n                <div className=\"char__name\">{el.name}</div>\n            </li>\n        )\n    });\n    const loading = isLoading && !isNewCharsLoading && <Preloader />\n    const error = isError && <Error />\n\n    if (isLoading) {\n        // динамический импорт всегда возвращает promise с объектом загружаемого модуля\n        import('../someDynImportFunc')\n            // если экспорт именованный, мы обращаемся к имени функции\n            // .then(obj => obj.logger())\n            // если экспорт дефолтный, мы обращаемся к дефолту\n            .then(obj => obj.default())\n            .catch(console.log('dynamic import is fail'))\n    }\n\n    return (\n        <div className=\"char__list\">\n            {loading}\n            {error}\n            <ul className=\"char__grid\" >\n                {charArray}\n            </ul>\n            <button\n                className=\"button button__main button__long\"\n                disabled={isNewCharsLoading}\n                onClick={() => onRequest(offset)}\n                style={{ display: charsEnded ? 'none' : 'block' }}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\n\n\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import './charInfo.scss';\nimport { useState, useEffect } from 'react';\nimport useComicsAPI from '../../api/ComicsAPI';\nimport { Error } from '../error/Error';\nimport Preloader from '../spinner/Preloader';\nimport Skeleton from '../skeleton/Skeleton';\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null)\n\n    const {isError, isLoading, getCharacter, clearError} = useComicsAPI();\n\n    const updateChar = () => {\n        clearError()\n        const id = props.charId\n        // останавливаем функцию, если нет id\n        if (!id) { return }\n\n        getCharacter(id)\n            .then(charLoaded)\n        // handmade error\n        // this.foo.bar = 0\n    }\n\n    const charLoaded = (char) => {\n        setChar(char)\n    }\n\n    useEffect(() => {\n        updateChar()\n    // eslint-disable-next-line\n    }, [props.charId])\n\n    const skeleton = char || isError || isLoading ? null : <Skeleton />\n    const errorMessage = isError ? <Error /> : null;\n    const spinner = isLoading && <Preloader />;\n    const content = !(isLoading || isError || !char) && <View char={char} />;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {spinner}\n            {errorMessage}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = char\n    const notFoundImgLink = 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg';\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={(thumbnail === notFoundImgLink) ? { objectFit: 'contain' } : { objectFit: 'cover' }} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        {/* \n                        Since React Router version 5.0.1\n                        <Link to=\"route\" target=\"_blank\" rel=\"noopener noreferrer\" /> \n                        */}\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length === 0 && <EmptyComics />}\n                {\n                    comics.map((el, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {el.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nconst EmptyComics = () => {\n    return (\n        <li >\n            We don't have information about that\n        </li>\n    )\n}\n\nexport default CharInfo;","import { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    // только обновляет состояние, componentDidCatch более функциональный\n    // static getDerivedStateFromError(error) {\n    //     return {error: true}\n    // }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo)\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return (\n                <h2>Something went wrong</h2>\n            )\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n    const [selectedChar, setSelectedChar] = useState(null)\n    const changeCharSelected = (id) => {\n        setSelectedChar(id)\n    }\n\n    return (\n        <>\n            <ErrorBoundary>\n                <RandomChar />\n            </ErrorBoundary>\n\n            <div className=\"char__content\">\n                <CharList changeCharSelected={changeCharSelected} charId={selectedChar} />\n                <ErrorBoundary>\n                    <CharInfo charId={selectedChar} />\n                </ErrorBoundary>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n        </>\n    )\n}\n\nexport default MainPage\n"],"sourceRoot":""}